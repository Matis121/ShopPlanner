/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as RegisterImport } from './routes/register'
import { Route as LoginImport } from './routes/login'
import { Route as AuthenticatedImport } from './routes/_authenticated'
import { Route as AuthenticatedIndexImport } from './routes/_authenticated/index'
import { Route as AuthenticatedMylistsIndexImport } from './routes/_authenticated/mylists/index'
import { Route as AuthenticatedGroupsIndexImport } from './routes/_authenticated/groups/index'
import { Route as AuthenticatedMylistsIdImport } from './routes/_authenticated/mylists/$id'
import { Route as AuthenticatedGroupsGroupIdImport } from './routes/_authenticated/groups/$groupId'
import { Route as AuthenticatedGroupsGroupIdListListIdImport } from './routes/_authenticated/groups_/$groupId/list/$listId'

// Create/Update Routes

const RegisterRoute = RegisterImport.update({
  path: '/register',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedRoute = AuthenticatedImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedIndexRoute = AuthenticatedIndexImport.update({
  path: '/',
  getParentRoute: () => AuthenticatedRoute,
} as any)

const AuthenticatedMylistsIndexRoute = AuthenticatedMylistsIndexImport.update({
  path: '/mylists/',
  getParentRoute: () => AuthenticatedRoute,
} as any)

const AuthenticatedGroupsIndexRoute = AuthenticatedGroupsIndexImport.update({
  path: '/groups/',
  getParentRoute: () => AuthenticatedRoute,
} as any)

const AuthenticatedMylistsIdRoute = AuthenticatedMylistsIdImport.update({
  path: '/mylists/$id',
  getParentRoute: () => AuthenticatedRoute,
} as any)

const AuthenticatedGroupsGroupIdRoute = AuthenticatedGroupsGroupIdImport.update(
  {
    path: '/groups/$groupId',
    getParentRoute: () => AuthenticatedRoute,
  } as any,
)

const AuthenticatedGroupsGroupIdListListIdRoute =
  AuthenticatedGroupsGroupIdListListIdImport.update({
    path: '/groups/$groupId/list/$listId',
    getParentRoute: () => AuthenticatedRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_authenticated': {
      preLoaderRoute: typeof AuthenticatedImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/register': {
      preLoaderRoute: typeof RegisterImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated/': {
      preLoaderRoute: typeof AuthenticatedIndexImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/groups/$groupId': {
      preLoaderRoute: typeof AuthenticatedGroupsGroupIdImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/mylists/$id': {
      preLoaderRoute: typeof AuthenticatedMylistsIdImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/groups/': {
      preLoaderRoute: typeof AuthenticatedGroupsIndexImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/mylists/': {
      preLoaderRoute: typeof AuthenticatedMylistsIndexImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/groups/$groupId/list/$listId': {
      preLoaderRoute: typeof AuthenticatedGroupsGroupIdListListIdImport
      parentRoute: typeof AuthenticatedImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren([
  AuthenticatedRoute.addChildren([
    AuthenticatedIndexRoute,
    AuthenticatedGroupsGroupIdRoute,
    AuthenticatedMylistsIdRoute,
    AuthenticatedGroupsIndexRoute,
    AuthenticatedMylistsIndexRoute,
    AuthenticatedGroupsGroupIdListListIdRoute,
  ]),
  LoginRoute,
  RegisterRoute,
])

/* prettier-ignore-end */
